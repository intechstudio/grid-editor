name: ðŸ¦‡ Nightly build

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*"

jobs:
  profile-cloud-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Profile Cloud repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.PROFILE_CLOUD_KEY }}
          repository: intechstudio/profile-cloud
          fetch-depth: 0

      - name: Checkout latest tag
        run: git checkout $(git describe --tags $(git rev-list --tags --max-count=1))

      - name: Create public env file
        run: |
          touch .env
          echo PUBLIC_COMMIT_HASH=$(git log --format="%h" -n 1) >> .env
          echo PUBLIC_APP_ENV=development >> .env
          echo PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.PUBLIC_GOOGLE_CLIENT_ID_DEV }} >> .env
          echo PUBLIC_CREATION_DATE=$(git log --format="%cd" --date=format:'%Y-%m-%d' -1) >> .env

      - name: Build profile cloud project
        run: npm ci && npm run build

      - name: Upload profile cloud folder
        uses: actions/upload-artifact@v4
        with:
          name: profile-cloud
          path: public/
          retention-days: 1
  delete-nightly-release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read version from package.json
        id: get_version
        run: |
          version=$(cat package.json | jq -r '.version')
          tag_name="v${version}-nightly"
          echo "Version: $version"
          echo "Tag name: $tag_name"
          echo "::set-output name=tag_name::$tag_name"

      - name: Get Release ID by Tag
        id: get_release_id
        run: |
          tag_name="${{ steps.get_version.outputs.tag_name }}"
          release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${tag_name}")

          if echo "$release" | grep -q '"id":'; then
            release_id=$(echo "$release" | jq '.id')
            echo "Release ID: $release_id"
            echo "::set-output name=release_id::$release_id"
          else
            echo "Release with tag ${tag_name} not found."
            exit 0

      - name: Delete Release
        if: steps.get_release_id.outputs.release_id != ''
        run: |
          release_id="${{ steps.get_release_id.outputs.release_id }}"
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${release_id}"
          echo "Release with ID $release_id has been deleted."

      - name: Delete Tag
        run: |
          tag_name="${{ steps.get_version.outputs.tag_name }}"
          git push --delete origin "$tag_name"

  matrix-build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs: [profile-cloud-build, delete-nightly-release]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ""
          submodules: true

      - name: Setup NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: "18.16.1"

      - name: Download profile cloud artifact
        uses: actions/download-artifact@v4
        with:
          name: profile-cloud
          path: profile-cloud/

      # WORKFLOW_NAME is used for productName extension in electron-builder.js
      - name: Set Env
        shell: bash
        run: |
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "WORKFLOW_NAME=nightly" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm i

      - name: Update package.json
        run: node ./build-scripts/nightly-packageModifier.js

      - name: Build
        run: npm run export:nightly
        if: ${{ always() }}
        env:
          # gh repo token
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # windows Code signing
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

          # Apple ID
          APPLE_ID: ${{secrets.APPLE_ID}}
          APPLE_TEAM_ID: ${{secrets.APPLE_TEAM_ID}}
          APPLE_APP_SPECIFIC_PASSWORD: ${{secrets.APPLE_APP_SPECIFIC_PASSWORD}}

          # macOS Code signing
          CSC_LINK: ${{ secrets.MAC_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CSC_KEY_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-nightly
          path: build/*.*

      - name: Release Nightly
        uses: softprops/action-gh-release@v1
        if: ${{ github.ref == 'refs/heads/stable' }}
        with:
          name: Release Nightly Version
          tag_name: ${{ needs.delete-nightly-release.outputs.tag_name }}
          files: build/*.*
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-unit-test:
    name: Linux Unit Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ""
          submodules: true

      - name: Setup nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "18.16.1"

      - name: Install dependencies
        run: npm i

      - name: "Run unit tests"
        run: |
          npm test >> unit_test.txt
          cat unit_test.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-unit-test
          path: unit_test.txt

      - uses: tsickert/discord-webhook@v4.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_DEV_WEBHOOK }}
          content: "Heyo, here are the editor unit test results!"
          filename: "unit_test.txt"
