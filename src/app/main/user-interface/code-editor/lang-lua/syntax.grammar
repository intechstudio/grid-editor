@precedence {
  call,
  power @right,
  prefix,
  times @left,
  plus @left,
  concat @right,
  shift @left,
  bitand @left,
  xor @left,
  bitor @left,
  compare @left,
  and @left,
  or @left
}

@top Chunk { Block }

Block { statement* ReturnStatement? }

ReturnStatement { kw<"return"> exp? ";"?}

@skip { newline | space | Comment }

statement[@isGroup=Statement] {
  ";" |
  Label |
  kw<"break"> |
  Goto{ kw<"goto"> Name } |
  Scope { kw<"do"> Block kw<"end"> } |
  WhileStatement { kw<"while"> exp kw<"do"> Block kw<"end"> } |
  RepeatStatement { kw<"repeat"> Block kw<"until"> exp } |
  IfStatement |
  ForStatement |
  Function { kw<"function"> FuncName FuncBody } |
  LocalFunction { kw<"local"> kw<"function"> Name FuncBody } |
  Assign { VarList "=" ExpList } |
  FunctionCall ~fcall |
  Local { kw<"local"> AttNameList ("=" ExpList)? } |
  GridGlobal | 
  Element |
  This { kw<"self"> Element}
}

// Grid specific keywords

GridGlobal {
  global
}
global { @specialize<identifier , "midi_send" | "keyboard_send" | "random" | "hardware_configuration" | "version_major" | "version_minor" | "version_patch" | "module_position_x" | "module_position_y" | "module_rotation" | "page_next" | "page_previous" | "page_current" | "page_load" | "lookup" | "limit" | "print" | "led_default_red" | "led_default_green" | "led_default_blue" | "led_value" | "led_timeout" | "led_color_min" | "led_color_mid" | "led_color_max" | "led_color" | "led_animation_rate" | "led_animation_type" | "led_animation_phase_rate_type" | "timer_start" | "timer_stop" > FuncBody }

Element {
  element 
}
element { @specialize<identifier , "element_index" | "button_number" | "button_value" | "button_min" | "button_max" | "button_mode" | "button_elapsed_time" | "button_state" | "encoder_number" | "encoder_value" | "encoder_min" | "encoder_max" | "encoder_mode" | "encoder_elapsed_time" | "encoder_state" | "encoder_change" | "button_change" | "potmeter_number" | "potmeter_value" | "potmeter_min" | "potmeter_max" | "potmeter_resolution" | "potmeter_elapsed_time" | "potmeter_state" | "potmeter_change"> FuncBody }


IfStatement {
  kw<"if"> exp kw<"then"> Block
  (kw<"elseif"> exp kw<"then"> Block)*
  (kw<"else"> Block)
  kw<"end">
}

ForNumeric { Name "=" exp "," exp ("," exp)? }

ForGeneric { NameList kw<"in"> ExpList }

ForStatement {
  kw<"for"> (ForNumeric | ForGeneric) kw<"do"> Block kw<"end">
}

FuncName { Name ("." Name)* (":" Name)? }
FuncBody { "(" ")" Block kw<"end"> }

list<term> { term ("," term)* }

NameList { list<Name> }
ExpList { list<exp> }
VarList { list<var> }

AttNameList { list<Name Attrib> }
Attrib { ( "<" Name ">" )? }

exp {
  kw<"nil"> | kw<"true"> | kw<"false"> | "..." |
  Number |
  String |
  prefixexp |
  BinaryExpression |
  UnaryExpression |
  TableConstructor |
  FunctionDef { kw<"function"> FuncBody } |
  Element |
  GridGlobal
}

field[@isGroup=Field] {
  FieldDynamic { "[" exp "]" "=" exp } |
  FieldProp { Name "=" exp } |
  FieldExp { exp }
}

prefixexp {
  var |
  Parens { "(" exp ")" ~parens } |
  FunctionCall ~fcall
}
FunctionCall { prefixexp (":" Name)? !call args }
args {
  String |
  TableConstructor |
  funcParams[@dynamicPrecedence=1] { "(" list<exp>? ")" ~parens }
}

var {
  Name | Property { (prefixexp "." Name) } | MemberExpression { (prefixexp "[" exp "]") }
}

kw<term> { @specialize[@name={term}]<identifier, term> }

Name { identifier }
Label { "::" Name "::" }
String { simpleString }

BinaryExpression {
  exp !or kw<"or"> exp |
  exp !and kw<"and"> exp |
  exp !compare CompareOp exp |
  exp !bitor BitOp{"|"} exp |
  exp !bitand BitOp{"&"} exp |
  exp !xor BitOp{"~"} exp |
  exp !shift BitOp{"<<" | ">>"} exp |
  exp !concat ".." exp |
  exp !plus ArithOp{"+" | minus} exp |
  exp !times ArithOp{"*" | "/" | "%" | "//"} |
  exp !power ArithOp{"^"} exp
}

UnaryExpression {
  !prefix kw<"not"> exp |
  !prefix (ArithOp{"+" | minus} | BitOp{"~"}) exp
}

TableConstructor { "{" (field (fieldsep field) fieldsep?)? "}" }

@tokens {
  CompareOp { "<" | ">" | $[<>=~] "=" }  

  word { $[a-zA-Z_]+ }

  identifier { word }

  stringEscape {
    "\\" ($[abfnz"'\\] | digit digit? digit?) |
    "\\x" hex hex |
    // NOTE: this should really be /[0-7]hex{5}/ at max, but that's annoying to write
    "\\u{" hex+ "}"
  }

  simpleString { "'" (stringEscape | ![\r\n\\'])+ "'" | '"' (stringEscape | ![\r\n\\"])+ '"'}

  hex { $[0-9a-fA-F] }
  digit { std.digit }

  Number {
    digit+ ("." digit+)? ($[eE] $[+\-] digit+)? |
    "0" $[xX] hex+ ("." hex+)? ($[pP] $[+/-] digit+)?
  }

  Comment { "--" ![\n\r]* }

  space { ($[ \t\f] | "\\" $[\n\r])+ }
  newline { $[\n\r] | "\n\r" | "\r\n" }

  "..."[@name=Ellipsis]
  ".."[@name=Concat]

  @precedence { Comment, minus }

  minus {"-"}
  fieldsep { $[,;] }

  "(" ")" "[" "]" "{" "}"

  "." "," ";" ":" "*" "::"
}